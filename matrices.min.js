class Mat3x3{static validate(t){if(!(t instanceof Array))throw new Error("Matrix must be an instance of Array");if(3!==t.length)throw new Error("Insufficient 3x3 matrice data");for(let a=t.length-1;a>0;a--)if(t[a].length<3)throw new Error("Insufficient 3x3 matrice data")}static getData(t){if(t instanceof Mat3x3)return t.data;if(t instanceof Array)return Mat3x3.validate(t),t;throw new Error("getData expects an argument of an Array instance")}static multiplyVec(t,a){let e=[],r=0,n=Mat3x3.getData(a),s=t;t instanceof Array&&3===t.length?s=t:t instanceof Object&&t.hasOwnProperty("x")&&t.hasOwnProperty("y")&&(s=[t.x,t.y,1]);for(let t=0;t<n.length;t++){r=0;for(let a=0;a<n.length;a++){r+=s[a]*n[a][t]}e.push(r)}return e}static rotate(t){return new Mat3x3([[Math.cos(t),Math.sin(t),0],[-Math.sin(t),Math.cos(t),0],[0,0,1]])}static createEmpty(){return new Mat3x3([[0,0,0],[0,0,0],[0,0,0]])}constructor(t){Mat3x3.validate(t),this.data=t}add(t){let a=[],e=Mat3x3.getData(t);for(let t=0;t<this.data.length;t++){a.push(new Array(3));for(let r=0;r<this.data.length;r++)a[t][r]=this.data[t][r]+e[t][r]}return new Mat3x3(a)}sub(t){let a=[],e=Mat3x3.getData(t);for(let t=0;t<this.data.length;t++){a.push(new Array(3));for(let r=0;r<this.data.length;r++)a[t][r]=this.data[t][r]-e[t][r]}return new Mat3x3(a)}scale(t){let a=[];Mat3x3.getData(arg);for(let e=0;e<this.data.length;e++)for(let r=0;r<this.data.length;r++)a[e][r]=this.data[e][r]*t;return new Mat3x3(a)}transpose(){return new Mat3x3([[this.data[0][0],this.data[1][0],this.data[2][0]],[this.data[0][1],this.data[1][1],this.data[2][1]],[this.data[0][2],this.data[1][2],this.data[2][2]]])}}
